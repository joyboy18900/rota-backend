version: '3.8'

services:
  # Kong API Gateway
  kong:
    image: kong/kong-gateway:3.4
    container_name: rota-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_LOG_LEVEL: debug
    ports:
      - "8000:8000"  # API Gateway Port
      - "8001:8001"  # Admin API Port
      - "8443:8443"  # HTTPS Proxy
    volumes:
      - ./config:/usr/local/kong/declarative
      - kong_data:/usr/local/kong/data
    networks:
      - rota-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api:
    build: .
    container_name: rota-api
    restart: unless-stopped
    environment:
      - APP_ENV=development
      - APP_PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=rota_dev
      - DB_USER=rota_dev
      - DB_PASSWORD=rota_dev
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=dev-secret-key-change-this
      - JWT_ACCESS_TOKEN_TTL=24h
      - JWT_REFRESH_TOKEN_TTL=168h
    # ไม่ expose port 3000 ออกไปภายนอก เพื่อให้เข้าถึงได้เฉพาะผ่าน Kong
    # ports:
    #   - "3000:3000"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rota-network
    # ไม่ใช้ healthcheck เพื่อความง่าย
    command: go run main.go

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rota-postgres
    environment:
      - POSTGRES_USER=rota_dev
      - POSTGRES_PASSWORD=rota_dev
      - POSTGRES_DB=rota_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rota_dev -d rota_dev"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - rota-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: rota-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - rota-network

  # Adminer for database management
  adminer:
    image: adminer:latest
    platform: linux/arm64
    container_name: rota-adminer
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - rota-network

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    platform: linux/arm64
    container_name: rota-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@rota.dev
      - PGADMIN_DEFAULT_PASSWORD=rota_pgadmin_dev
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - rota-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    platform: linux/amd64  # ให้ Docker emulate amd64 บน arm64
    container_name: rota-redis-commander
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HTTP_USER=rota_redis_admin
      - HTTP_PASSWORD=rota_redis_dev
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - rota-network

networks:
  rota-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  kong_data:
